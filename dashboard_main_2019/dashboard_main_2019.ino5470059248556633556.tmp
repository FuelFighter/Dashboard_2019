/* SEM 2019
 * by Ludvik Rønning & Jørgen Wisløff
 * Code for the dashboard of the 2019 car
 */

/*------------------ Include Headerfiles ------------------*/
#include "can.h"
#include "graphics.h"
#include "helpers.h"
#include "lights.h"

/*-------------------------- DEBUG -------------------------*/
bool debug = true;


/*-------------------------- PINS -------------------------*/

/* COMM PARAMETERS */
// RIGHT SCREEN
#define SR_SCK  13
#define SR_MOSI 11
#define SR_CS   10

// LEFT SCREEN
#define SL_SCK  32
#define SL_MOSI 21
#define SL_CS   31

// LIGHTS
#define PIN_BACKLIGHT   35
#define PIN_FRONTLIGHT   36


// BUTTONS
#define PIN_WIPER_BUTTON     5
#define PIN_HAZARD           6
#define PIN_RACE_MODE        7
#define PIN_RESET            8
 
#define PIN_LIGHT_BUTTON     24
#define PIN_BATTERY          25                                                             //not used
#define PIN_PROPULTION_POWER 26                                                             //not used
#define PIN_BLANK            27
#define PIN_BRAKE            28

#define PIN_WIPER_SHUTDOWN 17
#define PIN_WIPER_COM 18

#define PIN_WIPER 15

// LED's on PCB for CAN
#define PIN_CAN_RX_LED 23
#define PIN_CAN_TX_LED 22

/*-------------------------- VARIABLES -------------------------*/

bool brakeON = false;
bool regenBrakeON = false;
bool hazardLightON = false;
bool hazardLightRunning = false;
bool lightON = true;
bool raceModeON = true;
bool windowWiperON = false;
uint8_t brakeVal = 0;
uint8_t optimalCounter;

uint8_t interruptThreshold = 500; //#define?
            


Adafruit_NeoPixel frontlights(NUM_FRONTLIGHTS, PIN_FRONTLIGHT, NEO_GRBW + NEO_KHZ800);
Adafruit_NeoPixel backlights(NUM_BACKLIGHTS, PIN_BACKLIGHT, NEO_GRBW + NEO_KHZ800);

Adafruit_SharpMem leftScreen(SL_SCK, SL_MOSI, SL_CS, WIDTH, HEIGHT); 
Adafruit_SharpMem rightScreen(SR_SCK, SR_MOSI, SR_CS, WIDTH, HEIGHT);

/*------------------------- FUCTIONS -------------------------*/

void initPins() {
  
//pinMode(PIN_WIPER_BUTTON, INPUT_PULLUP);                                                //init wiper with interrupt
  //attachInterrupt(digitalPinToInterrupt(PIN_WIPER_BUTTON), wiper_ISR, FALLING);

  pinMode(PIN_HAZARD, INPUT_PULLUP);                                                      //init hazzard light with interrupt
  attachInterrupt(digitalPinToInterrupt(PIN_HAZARD), hazard_ISR, FALLING);

  pinMode(PIN_RACE_MODE, INPUT_PULLUP);                                                   //init race mode with interrupt
  attachInterrupt(digitalPinToInterrupt(PIN_RACE_MODE), raceMode_ISR, FALLING);

  pinMode(PIN_RESET, INPUT_PULLUP);                                                       //init reset button with interrupt
  attachInterrupt(digitalPinToInterrupt(PIN_RESET), reset_ISR, FALLING);
   
  pinMode(PIN_LIGHT_BUTTON, INPUT_PULLUP);                                                //init light button with interrupt
  attachInterrupt(digitalPinToInterrupt(PIN_LIGHT_BUTTON), lights_ISR, FALLING);

  pinMode(PIN_BLANK, INPUT_PULLUP);                                                       //init blank button with interrupt
  attachInterrupt(digitalPinToInterrupt(PIN_BLANK), blank_ISR, FALLING);

  pinMode(PIN_BRAKE, INPUT_PULLUP);                                                       //init brake pedal sensor (button) with interrupt
  attachInterrupt(digitalPinToInterrupt(PIN_BRAKE), brake_ISR, CHANGE);

  //pinMode(PIN_WIPER_SHUTDOWN, INPUT_PULLDOWN);
  //attachInterrupt(digitalPinToInterrupt(PIN_WIPER_SHUTDOWN), wiperShutdown_ISR, RISING);   //init wiper shutdown feedback with interrupt

 // pinMode(PIN_WIPER_COM, OUTPUT);

 // pinMode(PIN_WIPER, OUTPUT);

  if(debug) {
    Serial.println("all buttons initialized with interrupt");
  }
}

void updateScreen(Adafruit_SharpMem& screen, bool right)
{
 if(right)
 {
   drawSpeed(screen, motor1Msg.buf[6]/5, motor2Msg.buf[6]/5);                                        //speed is sent from motor controllers at position 7
                                                                                                     //it is sent as km/h * 5 to utilize the measuring range
                                                                                                        
   drawGear(screen, clutchMsg.buf[3]);                                                               //clutch status aka gear is sent as 0=neutral, 1=first, 2=secound
   //drawLightIcon(screen, lightON);                                                                 //variable defined in main
   drawVoltageValue(screen, (motor1Msg.buf[2]<<8 + motor1Msg.buf[3])/10,                             //voltage uses two positions in motor controller can message
                            (motor2Msg.buf[2]<<8 + motor2Msg.buf[3])/10);                            //first position needs 8 bitshifts, and that value i batt V *10
   
   drawCurrentValue(screen, motor1Msg.buf[1]/10, motor2Msg.buf[2]/10);                               //curent is sent at posison 1 and is motor current A * 10
   drawPowerConsumption(screen, (motor1Msg.buf[4]<<8 + motor1Msg.buf[5])/10,                         //identical as voltage, just position 5 and 6
                                (motor2Msg.buf[4]<<8 + motor2Msg.buf[5])/10);                        //first position needs 8 bitshifts, and that value i used energy *10;                                                                   
   //drawRaceMode(screen, raceModeON);                                                               //variable defined in main
 
 } else if (!right) 
 {
   drawLapCount(screen, 2);
   drawLapTime(screen, 1);                                                                              
   drawTime(screen, 1000);
   //drawSector(screen, sWheelMsg.buf[7]);  //sent at last position of steering wheel
   
 }
  //readCan(rxMsg, sWheelMsg);
  printCanToSerial(sWheelMsg, true);
   screen.refresh();
}
void updateScreen(Adafruit_SharpMem& screen, bool right)
{
 if(right)
 {
   drawSpeed(screen, motor1Msg.buf[6]/5, motor2Msg.buf[6]/5);                                        //speed is sent from motor controllers at position 7
                                                                                                     //it is sent as km/h * 5 to utilize the measuring range
                                                                                                        
   drawGear(screen, clutchMsg.buf[3]);                                                               //clutch status aka gear is sent as 0=neutral, 1=first, 2=secound
   //drawLightIcon(screen, lightON);                                                                 //variable defined in main
   drawVoltageValue(screen, (motor1Msg.buf[2]<<8 + motor1Msg.buf[3])/10,                             //voltage uses two positions in motor controller can message
                            (motor2Msg.buf[2]<<8 + motor2Msg.buf[3])/10);                            //first position needs 8 bitshifts, and that value i batt V *10
   
   drawCurrentValue(screen, motor1Msg.buf[1]/10, motor2Msg.buf[2]/10);                               //curent is sent at posison 1 and is motor current A * 10
   drawPowerConsumption(screen, (motor1Msg.buf[4]<<8 + motor1Msg.buf[5])/10,                         //identical as voltage, just position 5 and 6
                                (motor2Msg.buf[4]<<8 + motor2Msg.buf[5])/10);                        //first position needs 8 bitshifts, and that value i used energy *10;                                                                   
   //drawRaceMode(screen, raceModeON);                                                               //variable defined in main
 
 } else if (!right) 
 {
   drawLapCount(screen, 2);
   drawLapTime(screen, 1);                                                                              
   drawTime(screen, 1000);
   //drawSector(screen, sWheelMsg.buf[7]);  //sent at last position of steering wheel
   
 }
  //readCan(rxMsg, sWheelMsg);
  //printCanToSerial(sWheelMsg, true);
   screen.refresh();
}

/*------------------------- SETUP -------------------------*/
void setup() {
  //clockSpeedHigh(debug);
  initSerial();
  initCAN();
  //initCanMessage(txMsg, 3); 

  initLights(frontlights, backlights);
  raceLights(frontlights, backlights);
  
  initScreen(leftScreen, LEFTSCREEN);
  initScreen(rightScreen, RIGHTSCREEN);

  initPins();                                                                               //initPins needs to be last to avoid malfunction, not sure what goes wrong
  

}


/*----------------------- MAIN LOOP -----------------------*/

void loop() {
  
  readCan(rxMsg, sWheelMsg);
  updateScreen(leftScreen, LEFTSCREEN);
  updateScreen(rightScreen, RIGHTSCREEN);
  sWheelCan();
  hazardLightRunning = hazardLights(frontlights, backlights, hazardLightON, raceModeON);
  printCanToSerial(sWheelMsg, true);
  //printCanToSerial(rxMsg,true);
  delay(100);
}

/*----------------------- ISR FUCTIONS -----------------------*/

void wiperShutdown_ISR()
{
  digitalWrite(PIN_WIPER, LOW);
}

void wiper_ISR()                                                                            //Interrupt functionfor wiper button
{
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();                                                  //storing time of interrupt

  if (interrupt_time - last_interrupt_time > interruptThreshold) {                          //button debounce, testing if the button has been pushed recently
    if (windowWiperON == false) {
      windowWiperON = true;                                                                 //
      digitalWrite(PIN_WIPER, HIGH);
      if (debug) {
      Serial.println("Wiper on");                                                      //should be printed nicely for informative debug, this works for now
    }
    } else if (windowWiperON == true) {
      windowWiperON = false;
      digitalWrite(PIN_WIPER_COM, HIGH);
      if (debug) {
      Serial.println("Wiper off");                                                      //should be printed nicely for informative debug, this works for now
    }
    }
    last_interrupt_time = interrupt_time;                                                   //updating time of last interrupt
    
    
  }
}

void hazard_ISR()                                                                           //Interrupt function for hazard light button
{
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();                                                  //storing time of interrupt

  if (interrupt_time - last_interrupt_time > interruptThreshold){                           //button debounce, testing if the button has been pushed recently
    //int state = digitalRead(PIN_HAZARD);
    if (hazardLightON == false) {                                          //
      hazardLightON = true;
      if (debug) {
        Serial.println("Hazard on");                                                     //should be printed nicely for informative debug, this works for now
      }
    } else {
      hazardLightON = false;
      if (debug) {
        Serial.println("Hazard off");                                                     //should be printed nicely for informative debug, this works for now
      }
    }
    last_interrupt_time = interrupt_time;                                                   //updating time of last interrupt
  }
}


void raceMode_ISR()                                                                         //Interrupt function for race mode button
{
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();                                                  //storing time of interrupt

  if (interrupt_time - last_interrupt_time > interruptThreshold) {                          //button debounce, testing if the button has been pushed recently
    //int state = digitalRead(PIN_RACE_MODE);
    if  (raceModeON == false) {                                            //
      raceModeON = true;
      raceLights(frontlights, backlights);
      if (debug) {
        Serial.println("Race mode on");                                                 //should be printed nicely for informative debug, this works for now
      }
    } else if (raceModeON == true) {                       
      raceModeON = false;
      showLights(frontlights, backlights);
      if (debug) {
        Serial.println("Race mode off");                                                 //should be printed nicely for informative debug, this works for now
      }
    }
    last_interrupt_time = interrupt_time;                                                  //updating time of last interrupt
  }
}

void reset_ISR()                                                                           //Interrupt function for reset button
{
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();                                                 //storing time of interrupt
     
  if (interrupt_time - last_interrupt_time > interruptThreshold) {                         //button debounce, testing if the button has been pushed recently
    last_interrupt_time = interrupt_time;                                                  //updating time of last interrupt
    if (debug) {
      Serial.println("Reset pressed");                                                     //should be printed nicely for informative debug, this works for now
    }
  }
}


void lights_ISR()                                                                          //Interrupt function for lights button
{
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();                                                 //storing time of interrupt

  if (interrupt_time - last_interrupt_time > 500) {                                        //button debounce, testing if the button has been pushed recently
    //int state = digitalRead(PIN_HAZARD);
    if(lightON == false) {                                                
      lightON = true;
      if (raceModeON) {
        raceLights(frontlights, backlights);
        if (debug) {
          Serial.println("lights on - race mode");                                                    //should be printed nicely for informative debug, this works for now
        }
      } else {
        showLights(frontlights, backlights);
        if (debug) {
          Serial.println("lights on - show mode");                                                    //should be printed nicely for informative debug, this works for now
        }
      }
    } else {
      turnOffStrip(frontlights, 0, NUM_FRONTLIGHTS);
      turnOffStrip(backlights, 0, NUM_BACKLIGHTS);
      lightON = false;
      if (debug) {
          Serial.println("lights off");                                                    //should be printed nicely for informative debug, this works for now
      }
    }
    last_interrupt_time = interrupt_time;                                                  //updating time of last interrupt
  }
}


void blank_ISR()                                                                           //Interrupt function for blank button
{
  static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();                                                 //storing time of interrupt
 
  if (interrupt_time - last_interrupt_time > interruptThreshold){                          //button debounce, testing if the button has been pushed recently
    if (debug == true) 
    {                                                                                      //
      debug = false;
    } else
      debug = true;
    }
    last_interrupt_time = interrupt_time;                                                 //updating time of last interrupt
    if (debug) {
      Serial.println("blank pressed");                                                    //should be printed nicely for informative debug, this works for now
    }
}

void brake_ISR() 
{                                                                                        //Interrupt fuction for brake light
  static unsigned long last_interrupt_time;
  unsigned long interrupt_time = millis();                                               //storing time of last interrupt

  if (interrupt_time - last_interrupt_time > 200) {
    int state = digitalRead(PIN_BRAKE);
    if (brakeON == false && regenBrakeON == false) {                                                                 //testing if it should turn brake lights off   
        brakeON = true;
        brakeLights(backlights, brakeON);
        txMsg.buf[0] = 0x01;
        
        if (debug) {
          Serial.println("  NOT BRAKING - PEDAL");                                             //should be printed nicely for informative debug, this works for now
        }
    } else if(brakeON == true) {                                                            //testing if it should turn brake lights on
        brakeON = false;
        brakeLights(backlights, brakeON);
        txMsg.buf[0] = 0x00;
        
        if (debug) {
          Serial.println("  BRAKING - PEDAL");                                                 //should be printed nicely for informative debug, this works for now
        }
    }
    last_interrupt_time = interrupt_time;                                                //updating time of last interrupt
  }
} 

/*---------------- OTHER FUNCTIONS ---------------------*/

void sWheelCan()
{
    brakeVal = sWheelMsg.buf[2];
    if (brakeVal > 0 && regenBrakeON == false) {  // BRAKELIGHTS
      brakeLights(backlights, BRIGHTNESS_BACK_BRAKE);
      regenBrakeON = true;
      if (debug) {
          Serial.println("  BRAKING - REGEN");                                                 //should be printed nicely for informative debug, this works for now
        }
    }else if(brakeVal == 0 && regenBrakeON == true && brakeON == false){
      brakeLights(backlights, BRIGHTNESS_BACK);
      regenBrakeON = false;
      if (debug) {
          Serial.println("  NOT BRAKING - REGEN");                                             //should be printed nicely for informative debug, this works for now
        }
    }
    if (bitRead(sWheelMsg.buf[1],1)) { // LEFT BLINK //bitRead(rxMsg.buf[1],1) rxMsg.buf[1] &= (1<<1)
      blinkLights(frontlights, backlights, true, raceModeON);
    }
    if (bitRead(sWheelMsg.buf[1],2)) { // RIGHT BLINK  //bitRead(rxMsg.buf[1],2) rxMsg.buf[1] &= (1<<2)
      blinkLights(frontlights, backlights, false, raceModeON);
    }

    if(bitRead(sWheelMsg.buf[1],3)){ //CC-button, counter for optimal acceleration
   
    }
    if (bitRead(sWheelMsg.buf[1],4)) { //OptimalCurrent
      
    }
    if (bitRead(sWheelMsg.buf[1],5)) { //Lap
      
    }
    if(bitRead(sWheelMsg.buf[1],6)){ // Horn
      
    }
    if (bitRead(sWheelMsg.buf[1],7)) { //OptimalBrake
      
    }
}
